#!/usr/bin/env node

var fs = require('fs'),
    util = require('util'),
    inspect = util.inspect,
    colors = require('colors'),
    argv = require('optimist').argv,
    spawn = require('child_process').spawn,
    peICT = process.env.IMMEDIATE_CRASH_THRESHHOLD,
    crashThreshhold = peICT ? parseInt(peICT, 10) : 5000,
    opts = parseCmdOpts(argv),
    cmd = opts.cmd,
    args = opts.args,
    files = opts.files,
    crashed = false;
    
files.forEach(function(file) {
  fs.watchFile(file, {persistent: true, interval: 75}, function(curr, prev) {
    if (curr.mtime - prev.mtime == 0) return;
    
    log('Files modified, restarting', 'log');
    child.kill('SIGHUP');
    if (crashed) start();
  });
});

start = function() {
  log('\nMonitoring the following files for changes:\n' + inspect(files) + '\n');    
  log('STARTING NEW CHILD', 'log');
  child = spawn(cmd, args, {customFds: [1, 1, 1]});
  
  var launched = (new Date).getTime(),
      pid = child.pid;
      
  log('NEW CHILD PID ' + pid + '\n', 'log');
  child.on('exit', function() {
    log('\nCHILD EXITED: ' + pid + '\n', 'log');
    crashed = (((new Date).getTime() - launched) < crashThreshhold);
    crashed ? log('process crashed, waiting for file change', 'warn') : start();
  }); 
};
   
function parseCmdOpts(argv) {
  var cmd, arg, args, file, files;
  
  if(argv.c && argv.c !== true){
    cmd = argv.c;
    arg = argv.a;
    file = argv.file;

    if(cmd instanceof Array){
      log("You may only have one command. Instead, you specified the following: "+ inspect(cmd), 'error');
    }

    //[].concat(foo) coerces foo to an array
    // with our options from the cmd line, we dont know if the args are arrays or not.
    if(arg && arg !== true ){
      args = [].concat(arg);
      
      //warn if any of the args contain a space.
      var argParts, fixedArgString;
      for (var i = args.length - 1; i >= 0; i--){
        if(args[i].indexOf(" ") != -1){
          argParts = args[i].split(" ");
          fixedArgString = "";
          for (var j = argParts.length - 1; j >= 0; j--){
            fixedArgString = fixedArgString + ' -a "' + argParts[j] + '"';
          };
          
          log(inspect(args[i]) + " contains a space. Are you sure you didn't mean to have: " + fixedArgString + " ?", 'warn');
        }
      };
    }else{
      log("No argument for "+ inspect(cmd), 'warn');
      if(cmd.indexOf(" ") != -1){
        var cmdAry = cmd.split(" ");

        cmdAry.unshift("-c");
        var potentialArg = cmdAry.pop();
        cmdAry.push("-a");
        cmdAry.push(potentialArg);

        var fixedCmdString = cmdAry.join(" ");
        log("Your command contains a space. Are you suuuure you didn't mean to have : " + fixedCmdString + " ?", 'warn');
      }
    }

    if(file && file !== true){
      files = [].concat(file);
    }else{
      files = [];
    }

    if(argv._){
      files = files.concat(argv._);    
    }

    if(files.lenth == 0){
      log("You must include a file to watch! -file [file] or just append a list of files to the end of the options", 'error');
    }
  }else{
    cmd = argv._[0];
    arg = argv._[1];
    files = argv._.splice(2, argv._.length);
    log('No command (-c) arg passed to restartr. Will use "' +cmd+ '" as the command and "' + arg + '" as its argument', 'warn');

    args = [arg];
  }
  
  return {
    cmd : cmd,
    args: args,
    files: files
  };
};

process.on('SIGINT', function() {
  child.kill('SIGHUP');
  process.exit(0);
});

process.on('uncaughtException', function (err) {
  console.error('\n' + err.stack.bold.red + '\n');
  child.kill('SIGHUP');
  process.exit();
});

function log(msg, level) {
  switch (level) {
    case 'error':
      console.error(msg.bold.red);
      console.log('EXITING'.bold.red);
      child.kill('SIGHUP');
      process.exit();
      break;
    case 'warn':
      console.log('Warning: '.bold.cyan + msg.bold.cyan + '\n');
      break;
    case 'log':
      console.log(msg.bold.green);
      break;
    default:
      console.log(msg);
      break;
  }
};

start();