#!/usr/bin/env node

var sys = require('sys'),
    inspect = sys.inspect,
    fs = require('fs'),
    child_process = require('child_process'),
    spawn = child_process.spawn,
    exec = child_process.exec;

var argv = require('optimist').argv;

var cmd, args, files;

//parseCommandLineOpts defined way below because it is (too) huge
var opts = parseCommandLineOpts(argv);
cmd = opts.cmd;
args = opts.args;
files = opts.files;

var child = {};

sys.puts("Monitoring the following files for changes:", sys.inspect(files));

watch_files();
start_child();

if(process.env.IMMEDIATE_CRASH_THRESHHOLD){
  IMMEDIATE_CRASH_THRESHHOLD = parseInt(process.env.IMMEDIATE_CRASH_THRESHHOLD, 10);
}else{
  IMMEDIATE_CRASH_THRESHHOLD = 1000;
}


start_on_change = false;

function start_child(){
  console.log("STARTING NEW CHILD");
  child = spawn(cmd, args);

  var me = child.pid;
  
  var launched = (new Date).getTime();

  console.log("NEW CHILD PID", me);

  child.stdout.on('data', function (data) {
    console.log(data.toString());
  });

  child.stderr.on('data', function (data) {
    console.error('stderr: ' + data.toString());
  });

  child.on('exit', function(){
    console.log("CHILD EXITED: ", me);
    //maybe add some kind of wait for a change before restarting!
    var crashed_immediately = (((new Date).getTime() - launched)  < IMMEDIATE_CRASH_THRESHHOLD)
    if( crashed_immediately ){
      warn("your process crashed immediately after restarting. waiting for a filechange to restart");
      //the file changed handler will check for this flag and try to start the process on next file change if it is set.
      start_on_change = true;
    }else{
      start_child();
    }
    
  });
}

function watch_files(){
  function watch(f){
    fs.watchFile(f, {persistent: true, interval: 75}, function(curr, prev){
      onChangedFile(f, curr, prev);
    });
  }

  for(var i = 0; i < files.length; i++){
    watch(files[i]);
  }
}

function onChangedFile(f, curr, prev){
  if(curr.mtime - prev.mtime == 0){
    return;
  };

  if(child.pid){ 
    console.log("files modified. sending sigkill to: ", child.pid);
    exec("kill -9 "+child.pid, function(error, stdout, stderr){
      if(error){
        console.error("error trying to kill -9 the pid. exiting.");
        process.exit();
      }else{
        console.log(stdout);
        console.error(stderr);
      }
    });
  }else if(start_on_change){
    start_on_change = false;
    start_child();
  }
}

function parseCommandLineOpts(argv){
  var cmd, arg, args, file, files;
  
  if(argv.c && argv.c !== true){
    cmd = argv.c;
    arg = argv.a;
    file = argv.file;

    if(cmd instanceof Array){
      error("You may only have one command. Instead, you specified the following: "+ inspect(cmd));
    }

    //[].concat(foo) coerces foo to an array
    // with our options from the cmd line, we dont know if the args are arrays or not.
    if(arg && arg !== true ){
      args = [].concat(arg);
      
      //warn if any of the args contain a space.
      var argParts, fixedArgString;
      for (var i = args.length - 1; i >= 0; i--){
        if(args[i].indexOf(" ") != -1){
          argParts = args[i].split(" ");
          fixedArgString = "";
          for (var j = argParts.length - 1; j >= 0; j--){
            fixedArgString = fixedArgString + ' -a "' + argParts[j] + '"';
          };
          
          warn(" your argument: " + inspect(args[i]) + " contains a space. Are you sure you didn't mean to have: " + fixedArgString + " ?");
        }
      };
    }else{
      warn("No argument for "+ inspect(cmd));
      if(cmd.indexOf(" ") != -1){
        var cmdAry = cmd.split(" ");

        cmdAry.unshift("-c");
        var potentialArg = cmdAry.pop();
        cmdAry.push("-a");
        cmdAry.push(potentialArg);

        var fixedCmdString = cmdAry.join(" ");
        warn(" Your command contains a space. Are you suuuure you didn't mean to have : " + fixedCmdString + " ?");
      }
    }

    if(file && file !== true){
      files = [].concat(file);
    }else{
      files = [];
    }

    if(argv._){
      files = files.concat(argv._);    
    }

    if(files.lenth == 0){
      error(" You must include a file to watch! -file [file] or just append a list of files to the end of the options");
    }
  }else{
    cmd = argv._[0];
    arg = argv._[1];
    files = argv._.splice(2, argv._.length);
    console.log("No command (-c) arg passed to restartr. Will use \"" +cmd+ "\" as the command and \"" + arg + "\" as its argument");

    args = [arg];
  }
  
  return {
    cmd : cmd,
    args: args,
    files: files
  };
}

function error(str){
  console.log("Error.");
  console.log(str);
  console.log("Exiting.");
  process.exit();
}

function warn(str){
  console.log(str);
}